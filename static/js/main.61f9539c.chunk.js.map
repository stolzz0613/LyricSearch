{"version":3,"sources":["components/Formulario.js","components/Cancion.js","components/Info.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","setBusquedaLetra","errorText","setErrorText","error","setError","useState","artista","cancion","busqueda","setBusqueda","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","type","placeholder","onChange","Cancion","letra","length","Info","info","Object","keys","strArtistThumb","strGenre","strBiographyES","src","alt","href","strFacebook","rel","strTwitter","strLastFMChart","App","busquedaLetra","setLetra","setInfo","useEffect","a","url","url2","axios","all","get","then","response","data","lyrics","artists","catch","err","consultarApiLetra","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.61f9539c.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nconst Formulario = ({ setBusquedaLetra, errorText, setErrorText, error, setError }) => {\n\n    const [busqueda, setBusqueda] = useState({\n        artista: '',\n        cancion: ''\n    });\n\n    const { artista, cancion } = busqueda;\n\n    const actualizarState = (e) => {\n        setBusqueda({\n            ...busqueda,\n            [e.target.name]: e.target.value\n        })\n    };\n\n    const buscarInformacion = (e) => {\n        e.preventDefault();\n\n        if (artista.trim() === \"\" || cancion.trim() === \"\") {\n            setErrorText(\"Todos los campos son obligatorios\")\n            setError(true);\n            return;\n        }\n        setError(false);\n        setBusquedaLetra(busqueda);\n    }\n\n\n    return (\n        <div className=\"bg-info\">\n            {error\n                ? <p\n                    className=\"alert alert-danger text-center p-2\">\n                    {errorText}</p>\n                : null\n            }\n            <div className=\"container\">\n                <div className=\"row\">\n                    <form\n                        onSubmit={buscarInformacion}\n                        className=\"col card text-white bg-transparent mb-5 pt-5 pb-2\"\n                    >\n                        <fieldset>\n                            <legend className=\"text-center\">Buscador Letras Canciones</legend>\n                            <div className=\"row\">\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Artistas</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"artista\"\n                                            placeholder=\"Nombre Artista\"\n                                            onChange={actualizarState}\n                                            value={artista}\n                                        />\n                                    </div>\n                                </div>\n                                <div className=\"col-md-6\">\n                                    <div className=\"form-group\">\n                                        <label>Canción</label>\n                                        <input\n                                            type=\"text\"\n                                            className=\"form-control\"\n                                            name=\"cancion\"\n                                            placeholder=\"Nombre Canción\"\n                                            onChange={actualizarState}\n                                            value={cancion}\n                                        />\n                                    </div>\n                                </div>\n                            </div>\n                            <button\n                                type=\"submit\"\n                                className=\"btn btn-primary float-right\"\n                            > Buscar </button>\n                        </fieldset>\n                    </form>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Formulario;","import React, { Fragment } from 'react';\n\nconst Cancion = ({ letra }) => {\n\n    if (letra.length === 0) return null;\n    return (\n        <Fragment>\n            <h2>Letra Cancion</h2>\n            <p className=\"letra\">{letra}</p>\n        </Fragment>\n    )\n};\n\n\nexport default Cancion;","import React from 'react';\n\nconst Info = ({ info }) => {\n\n    if (Object.keys(info).length === 0) return null;\n    const { strArtistThumb, strGenre, strBiographyES } = info;\n    return (\n        <div className=\"card border-light\">\n            <div className=\"card-header bg-primary text-light font-weight-bold\">\n                Información Artista\n            </div>\n            <div className=\"card-body\">\n                <img src={info.strArtistThumb} alt=\"Logo Artista\" />\n                <p className=\"card-text\">Género: {strGenre}</p>\n                <p className=\"card-text\">Biografía: </p>\n                <p className=\"card-text\">{strBiographyES}</p>\n                <p className=\"card-text\">\n                    <a href={`https://${info.strFacebook}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-facebook\"></i>\n                    </a>\n                    <a href={`https://${info.strTwitter}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-twitter\"></i>\n                    </a>\n                    <a href={`${info.strLastFMChart}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                        <i className=\"fab fa-lastfm\"></i>\n                    </a>\n                </p>\n            </div>\n        </div>\n    );\n}\n\nexport default Info;","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from \"./components/Formulario\";\nimport Cancion from \"./components/Cancion\";\nimport Info from \"./components/Info\";\nimport axios from \"axios\";\n\nfunction App() {\n\n  const [busquedaLetra, setBusquedaLetra] = useState({});\n  const [letra, setLetra] = useState(\"\");\n  const [info, setInfo] = useState([]);\n  const [errorText, setErrorText] = useState(\"\")\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    if (Object.keys(busquedaLetra).length === 0) return;\n    const consultarApiLetra = async () => {\n      const { artista, cancion } = busquedaLetra\n      const url = `https://api.lyrics.ovh/v1/${artista}/${cancion}`\n      const url2 = `https://theaudiodb.com/api/v1/json/1/search.php?s=${artista}`\n\n      axios.all([\n        axios.get(url),\n        axios.get(url2)\n      ])\n        .then(response => {\n          setLetra(response[0].data.lyrics);\n          setInfo(response[1].data.artists[0]);\n        })\n        .catch(err => {\n          setError(true);\n          setErrorText(\"No se encontro información\");\n          setLetra(\"\");\n          setInfo([]);\n        })\n    }\n    consultarApiLetra()\n\n  }, [busquedaLetra ]);\n\n  return (\n    <Fragment>\n      <Formulario\n        error={error}\n        setError={setError}\n        setBusquedaLetra={setBusquedaLetra}\n        errorText={errorText}\n        setErrorText={setErrorText}\n      />\n\n      <div className=\"container mt-5\">\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <Info\n              info={info}\n            />\n          </div>\n          <div className=\"col-md-6 mt-4\">\n            <Cancion\n              letra={letra}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}